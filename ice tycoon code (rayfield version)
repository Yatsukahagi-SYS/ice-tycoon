local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "❄️ Ice Tycoon",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "❄️ Ice Tycoon Script Hub",
   LoadingSubtitle = "by Yatsukahagi",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

--Values
_G.AutoTapTowerButton = true
_G.AutoPrestige = true
_G.BuyButtons = true
_G.AutoBuyChips = true
_G.WalkSpeed = true

--Functions
function AutoTapTowerButton()

    print("AutoTapTowerButton function started.")

    spawn(function()
        while _G.AutoTapTowerButton == true do
            local freezing = workspace.Tycoons.Tycoon2.Bought:WaitForChild("Freezing")
            local towerdisplay = freezing:WaitForChild("TowerDisplay")
            local button = towerdisplay:WaitForChild("Button")
            local cd = button:WaitForChild("ClickDetector")
            local activeState = towerdisplay:WaitForChild("Active").Value
            print("Active state: ", activeState)

            if activeState == false then
                print("Clicking button...")
                fireclickdetector(cd)
                task.wait(1)
                activeState = towerdisplay:WaitForChild("Active").Value -- Re-check the state
		task.wait(1)
                if activeState == false then
                    fireclickdetector(cd)
                end
            end
            task.wait(0.1) -- Small delay to avoid excessive checks
        end
    end)
end


function AutoPrestige()
    while _G.AutoPrestige == true do
    local player = game.Players.LocalPlayer
    local Ready = player:WaitForChild("Ready").Value
    local buttonPath = player:WaitForChild("PlayerGui"):WaitForChild("GUI"):WaitForChild("PrestigeConfirm").Yes
        if buttonPath and buttonPath:IsA("TextButton") then
            task.wait()
            firesignal(buttonPath.MouseButton1Click)
            task.wait()
        end
        task.wait(1.5)
        if Ready == true then
        task.wait()
        player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(493.964447, 128.519585, 63.4681587, -8.10623169e-05, 8.10623169e-05, 1, -1, 8.10623169e-05, -8.10623169e-05, -8.10623169e-05, -1, 8.10623169e-05)
        task.wait()
        end
    end
end

function BuyButtons()
    while _G.BuyButtons == true do
    task.wait()
-- Define the folder
    local folder = workspace:WaitForChild("Tycoons"):WaitForChild("Tycoon2"):WaitForChild("Buttons")

-- Check if the folder exists
    if folder then
    -- Create a table to store the descendants
    local descendantsTable = {}

    -- Get all descendants of the folder
    local descendants = folder:GetDescendants()

    -- Iterate through each descendant
    for _, descendant in ipairs(descendants) do
        -- Check if the descendant is a Model
        if descendant:IsA("Model") then
            -- Get all parts within the model
            local parts = descendant:GetChildren()

            -- Iterate through each part
            for _, part in ipairs(parts) do
                -- Check if the part has a TouchInterest
                if part:FindFirstChild("TouchInterest") then
                    -- Add the part to the table
                    table.insert(descendantsTable, part)
                end
            end
        end
    end

    -- Function to fire TouchInterest
    local function fireTouchInterest(part, transmitter, toggle)
        firetouchinterest(part, transmitter, toggle)
    end

    -- Function to buy a button
    local function buyButton(part, transmitter)
        fireTouchInterest(part, transmitter, 0) -- 0 to start the touch
        task.wait() -- Wait to prevent crashing
        fireTouchInterest(part, transmitter, 1) -- 1 to end the touch
        task.wait(1) -- Wait between each buy
    end

    -- Iterate through the table and buy buttons in order
    for _, part in ipairs(descendantsTable) do
        -- Assuming 'transmitter' is the player character's HumanoidRootPart
        local transmitter = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if transmitter then
            -- Check for dependent buttons and buy them first
            local dependencies = part:FindFirstChild("Dependency")
            if dependencies and dependencies:IsA("StringValue") then
                local dependencyNames = dependencies.Value:split(",")
                for _, dependencyName in ipairs(dependencyNames) do
                    local dependency = folder:FindFirstChild(dependencyName)
                    if dependency and dependency:IsA("Model") then
                        local dependencyPart = dependency:FindFirstChild("Touch")
                        if dependencyPart and dependencyPart:FindFirstChild("TouchInterest") then
                            buyButton(dependencyPart, transmitter)
                        end
                    end
                end
            end
            -- Buy the current button
            buyButton(part, transmitter)
        end
    end
else
    print("Folder 'Buttons' not found in Workspace.")
        end
    end
end

function AutoBuyChips()
    while _G.AutoBuyChips == true do
        task.wait(1)
        game:GetService("ReplicatedStorage").BuyChip:FireServer()
        if game:GetService("Players").LocalPlayer.Chips.Value == 3 then
            while game:GetService("Players").LocalPlayer.Chips.Value == 3 do
                task.wait() -- Pause the function while there are 6 data chips
        end
    end
end

function WalkSpeed()
    while _G.WalkSpeed == true do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 25
        else
            humanoid.WalkSpeed = 16
        end
        task.wait() -- Add a wait to prevent crashing
    end
end






--Tabs
local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image

--Sections
local Section = MainTab:CreateSection("Main")

--Toggles
local Toggle = MainTab:CreateToggle({
   Name = "Auto Start Tower",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
		_G.AutoTapTowerButton = Value
        AutoTapTowerButton()
   end,
})

local Toggle2 = MainTab:CreateToggle({
   Name = "Auto Prestige",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
		_G.AutoPrestige = Value
        AutoPrestige()
   end,
})

local Toggle3 = MainTab:CreateToggle({
   Name = "Auto Buy Buttons",
   CurrentValue = false,
   Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
		_G.BuyButtons = Value
        BuyButtons()
   end,
})

local Toggle4 = MainTab:CreateToggle({
   Name = "Auto Buy Data-Chips",
   CurrentValue = false,
   Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
		_G.AutoBuyChips = Value
        AutoBuyChips()
   end,
})

local Toggle5 = MainTab:CreateToggle({
   Name = "WalkSpeed",
   CurrentValue = false,
   Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
		_G.WalkSpeed = Value
        WalkSpeed()
   end,
})
